import random

# ---- small primes for quick trial division (generated by a tiny sieve) ----
def _sieve(limit=1000):
    bs = [True]*(limit+1)
    bs[0]=bs[1]=False
    for p in range(2,int(limit**0.5)+1):
        if bs[p]:
            step = p
            start = p*p
            bs[start:limit+1:step] = [False]*(((limit - start)//step) + 1)
    return [i for i,b in enumerate(bs) if b]

_SMALL_PRIMES = _sieve(1000)

# ---- Miller–Rabin probable prime test (bases chosen for ~100-bit numbers) ----
_BASES_30DIG = (2,3,5,7,11,13,17,19,23,29,31,37)

def _is_probable_prime(n: int) -> bool:
    if n < 2:
        return False
    for p in _SMALL_PRIMES:
        if n % p == 0:
            return n == p
    # write n-1 = d*2^s
    d = n - 1
    s = 0
    while d % 2 == 0:
        d //= 2
        s += 1
    for a in _BASES_30DIG:
        if a % n == 0:
            continue
        x = pow(a, d, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(s - 1):
            x = (x * x) % n
            if x == n - 1:
                break
        else:
            return False
    return True  # extremely reliable for 30-digit range

# ---- draw a random prime in [LO, HI] (15 digits), ensuring 30-digit product ----
# sqrt(10^29) ≈ 316,227,766,016,837.94
LO = 316_227_766_016_839
HI = 999_999_999_999_999

def _random_prime_in_range(lo=LO, hi=HI) -> int:
    # make random odd candidate with top bit-ish set
    while True:
        cand = random.randrange(lo | 1, hi + 1, 2)
        if _is_probable_prime(cand):
            return cand

def generate_30_digit_semiprime() -> int:
    p = _random_prime_in_range()
    q = _random_prime_in_range()
    while q == p:
        q = _random_prime_in_range()
    n = p * q
    # guarantee exactly 30 digits
    if n < 10**29 or n >= 10**30:
        return generate_30_digit_semiprime()
    return n

# ---- build 500 unique semiprimes and print exactly "my_list=[...]" ----
def generate_semiprimes(k=500):
    s = set()
    while len(s) < k:
        s.add(generate_30_digit_semiprime())
    return list(s)

my_list = generate_semiprimes(500)
print("my_list=[" + ",".join(str(x) for x in my_list) + "]")
